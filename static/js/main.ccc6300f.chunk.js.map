{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","pages","className","cn","disabled","href","onClick","map","page","active","items","App","useState","setPerPage","selectedPage","setSelectedPage","firstItemIndex","lastItemIndex","currentItems","slice","id","value","onChange","selectEvent","Number","target","htmlFor","nextPage","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YAEI,IADJC,oBACI,MADW,aACX,EACEC,EAAaC,KAAKC,KAAKN,EAAQC,GAE/BM,EAAQd,EAAW,EAAGW,GAE5B,OACE,qBAAII,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAAa,CAAEC,SAA0B,IAAhBR,IAA3C,SACE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBT,EAAoB,OAAS,QAC5CU,QAAS,WACa,IAAhBV,GACFC,EAAaD,EAAc,IAPjC,oBAeDK,EAAMM,KAAI,SAACC,GAAD,OACT,oBAEEN,UAAWC,IAAG,YAAa,CAAEM,OAAQD,IAASZ,IAFhD,SAIE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,KACLC,QAAS,WACHE,IAASZ,GACXC,EAAaW,IANnB,SAUGA,KAbEA,MAkBT,oBAAIN,UAAWC,IAAG,YAAa,CAAEC,SAAUR,IAAgBE,IAA3D,SACE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeT,IAAgBE,EAAa,OAAS,QACrDQ,QAAS,WACHV,IAAgBE,GAClBD,EAAaD,EAAc,IAPjC,wBCrDFc,EAAQvB,EAAW,EAFL,IAGjBoB,KAAI,SAAAhB,GAAC,qBAAYA,MAEPoB,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOjB,EAAP,KAAgBkB,EAAhB,KACA,EAAwCD,mBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KAIMC,EAAiBrB,EAAUmB,GAAgBnB,EAAU,GACrDsB,EAAgBH,IAHHf,KAAKC,KATN,GASyBL,GATzB,GAcdA,EAAUmB,EAERI,EAAeR,EAAMS,MAAMH,EAAiB,EAAGC,GASrD,OACE,sBAAKf,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWY,EADX,mBACkCE,EADlC,cACsDC,EADtD,eA7Bc,GA6Bd,OAIA,sBAAKf,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRkB,GAAG,kBACHlB,UAAU,eACVmB,MAAO1B,EACP2B,SAtBkB,SAC1BC,GAEAV,EAAWW,OAAOD,EAAYE,OAAOJ,QACrCN,EAAgB,IAaV,UAOE,wBAAQM,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOK,QAAQ,kBAAkBxB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACER,MAvDY,GAwDZC,QAASA,EACTC,YAAakB,EACbjB,aAAc,SAAC8B,GAAD,OAAsBZ,EAAgBY,MAEtD,6BACGT,EAAaX,KAAI,SAAAqB,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YChElCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ccc6300f.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange = () => { },\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n\n  const pages = getNumbers(1, totalPages);\n\n  return (\n    <ul className=\"pagination\">\n      <li className={cn('page-item', { disabled: currentPage === 1 })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1 ? 'true' : 'false'}\n          onClick={() => {\n            if (currentPage !== 1) {\n              onPageChange(currentPage - 1);\n            }\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map((page) => (\n        <li\n          key={page}\n          className={cn('page-item', { active: page === currentPage })}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href=\"#1\"\n            onClick={() => {\n              if (page !== currentPage) {\n                onPageChange(page);\n              }\n            }}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li className={cn('page-item', { disabled: currentPage === totalPages })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === totalPages ? 'true' : 'false'}\n          onClick={() => {\n            if (currentPage !== totalPages) {\n              onPageChange(currentPage + 1);\n            }\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst TOTAL_ITEMS = 42;\n\nconst items = getNumbers(1, TOTAL_ITEMS)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [selectedPage, setSelectedPage] = useState(1);\n\n  const totalPages = Math.ceil(TOTAL_ITEMS / perPage);\n\n  const firstItemIndex = perPage * selectedPage - (perPage - 1);\n  const lastItemIndex = selectedPage === totalPages\n    ? TOTAL_ITEMS\n    : perPage * selectedPage;\n\n  const currentItems = items.slice(firstItemIndex - 1, lastItemIndex);\n\n  const handlePerPageChange = (\n    selectEvent: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setPerPage(Number(selectEvent.target.value));\n    setSelectedPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${selectedPage} (items ${firstItemIndex} - ${lastItemIndex} of ${TOTAL_ITEMS})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePerPageChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={TOTAL_ITEMS}\n        perPage={perPage}\n        currentPage={selectedPage}\n        onPageChange={(nextPage: number) => setSelectedPage(nextPage)}\n      />\n      <ul>\n        {currentItems.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}